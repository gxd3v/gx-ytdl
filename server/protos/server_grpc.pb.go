// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: server.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ytdl_Download_FullMethodName            = "/protos.Ytdl/Download"
	Ytdl_CreateSessionFolder_FullMethodName = "/protos.Ytdl/CreateSessionFolder"
	Ytdl_ListFiles_FullMethodName           = "/protos.Ytdl/ListFiles"
	Ytdl_SendFileToClient_FullMethodName    = "/protos.Ytdl/SendFileToClient"
	Ytdl_DeleteFile_FullMethodName          = "/protos.Ytdl/DeleteFile"
	Ytdl_DeleteSession_FullMethodName       = "/protos.Ytdl/DeleteSession"
)

// YtdlClient is the client API for Ytdl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YtdlClient interface {
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error)
	CreateSessionFolder(ctx context.Context, in *CreateSessionFolderRequest, opts ...grpc.CallOption) (*CreateSessionFolderResponse, error)
	ListFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListFilesResponse, error)
	SendFileToClient(ctx context.Context, in *SendFileToClientRequest, opts ...grpc.CallOption) (*SendFileToClientResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	DeleteSession(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeleteSessionResponse, error)
}

type ytdlClient struct {
	cc grpc.ClientConnInterface
}

func NewYtdlClient(cc grpc.ClientConnInterface) YtdlClient {
	return &ytdlClient{cc}
}

func (c *ytdlClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*DownloadResponse, error) {
	out := new(DownloadResponse)
	err := c.cc.Invoke(ctx, Ytdl_Download_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ytdlClient) CreateSessionFolder(ctx context.Context, in *CreateSessionFolderRequest, opts ...grpc.CallOption) (*CreateSessionFolderResponse, error) {
	out := new(CreateSessionFolderResponse)
	err := c.cc.Invoke(ctx, Ytdl_CreateSessionFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ytdlClient) ListFiles(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, Ytdl_ListFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ytdlClient) SendFileToClient(ctx context.Context, in *SendFileToClientRequest, opts ...grpc.CallOption) (*SendFileToClientResponse, error) {
	out := new(SendFileToClientResponse)
	err := c.cc.Invoke(ctx, Ytdl_SendFileToClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ytdlClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, Ytdl_DeleteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ytdlClient) DeleteSession(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeleteSessionResponse, error) {
	out := new(DeleteSessionResponse)
	err := c.cc.Invoke(ctx, Ytdl_DeleteSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YtdlServer is the server API for Ytdl service.
// All implementations should embed UnimplementedYtdlServer
// for forward compatibility
type YtdlServer interface {
	Download(context.Context, *DownloadRequest) (*DownloadResponse, error)
	CreateSessionFolder(context.Context, *CreateSessionFolderRequest) (*CreateSessionFolderResponse, error)
	ListFiles(context.Context, *emptypb.Empty) (*ListFilesResponse, error)
	SendFileToClient(context.Context, *SendFileToClientRequest) (*SendFileToClientResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	DeleteSession(context.Context, *emptypb.Empty) (*DeleteSessionResponse, error)
}

// UnimplementedYtdlServer should be embedded to have forward compatible implementations.
type UnimplementedYtdlServer struct {
}

func (UnimplementedYtdlServer) Download(context.Context, *DownloadRequest) (*DownloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedYtdlServer) CreateSessionFolder(context.Context, *CreateSessionFolderRequest) (*CreateSessionFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSessionFolder not implemented")
}
func (UnimplementedYtdlServer) ListFiles(context.Context, *emptypb.Empty) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedYtdlServer) SendFileToClient(context.Context, *SendFileToClientRequest) (*SendFileToClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFileToClient not implemented")
}
func (UnimplementedYtdlServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedYtdlServer) DeleteSession(context.Context, *emptypb.Empty) (*DeleteSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}

// UnsafeYtdlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YtdlServer will
// result in compilation errors.
type UnsafeYtdlServer interface {
	mustEmbedUnimplementedYtdlServer()
}

func RegisterYtdlServer(s grpc.ServiceRegistrar, srv YtdlServer) {
	s.RegisterService(&Ytdl_ServiceDesc, srv)
}

func _Ytdl_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YtdlServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ytdl_Download_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YtdlServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ytdl_CreateSessionFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YtdlServer).CreateSessionFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ytdl_CreateSessionFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YtdlServer).CreateSessionFolder(ctx, req.(*CreateSessionFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ytdl_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YtdlServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ytdl_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YtdlServer).ListFiles(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ytdl_SendFileToClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFileToClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YtdlServer).SendFileToClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ytdl_SendFileToClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YtdlServer).SendFileToClient(ctx, req.(*SendFileToClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ytdl_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YtdlServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ytdl_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YtdlServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ytdl_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YtdlServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ytdl_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YtdlServer).DeleteSession(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Ytdl_ServiceDesc is the grpc.ServiceDesc for Ytdl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ytdl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Ytdl",
	HandlerType: (*YtdlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Download",
			Handler:    _Ytdl_Download_Handler,
		},
		{
			MethodName: "CreateSessionFolder",
			Handler:    _Ytdl_CreateSessionFolder_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _Ytdl_ListFiles_Handler,
		},
		{
			MethodName: "SendFileToClient",
			Handler:    _Ytdl_SendFileToClient_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Ytdl_DeleteFile_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _Ytdl_DeleteSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

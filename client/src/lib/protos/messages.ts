// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "messages.proto" (package "protos", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SuccessEnum } from "./codes/success";
import { Any } from "./google/protobuf/any";
import { File } from "./global";
import { Error } from "./global";
import { Success } from "./global";
/**
 * @generated from protobuf message protos.DownloadRequest
 */
export interface DownloadRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: protos.DownloadRequestPayload payload = 2;
     */
    payload?: DownloadRequestPayload;
}
/**
 * @generated from protobuf message protos.DownloadRequestPayload
 */
export interface DownloadRequestPayload {
    /**
     * @generated from protobuf field: bool audio = 1;
     */
    audio: boolean;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
}
/**
 * @generated from protobuf message protos.DownloadResponse
 */
export interface DownloadResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bool successful = 2;
     */
    successful: boolean;
    /**
     * @generated from protobuf field: protos.Success success = 3;
     */
    success?: Success;
    /**
     * @generated from protobuf field: protos.Error error = 4;
     */
    error?: Error;
    /**
     * @generated from protobuf field: string data = 5;
     */
    data: string;
}
// ===================================

/**
 * @generated from protobuf message protos.CreateSessionFolderRequest
 */
export interface CreateSessionFolderRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: protos.CreateSessionFolderRequestPayload payload = 2;
     */
    payload?: CreateSessionFolderRequestPayload;
}
/**
 * @generated from protobuf message protos.CreateSessionFolderRequestPayload
 */
export interface CreateSessionFolderRequestPayload {
    /**
     * @generated from protobuf field: string session = 1;
     */
    session: string;
}
/**
 * @generated from protobuf message protos.CreateSessionFolderResponse
 */
export interface CreateSessionFolderResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bool successful = 2;
     */
    successful: boolean;
    /**
     * @generated from protobuf field: protos.Success success = 3;
     */
    success?: Success;
    /**
     * @generated from protobuf field: protos.Error error = 4;
     */
    error?: Error;
    /**
     * @generated from protobuf field: bool created = 5;
     */
    created: boolean;
}
// ===================================

/**
 * @generated from protobuf message protos.ListFilesResponse
 */
export interface ListFilesResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bool successful = 2;
     */
    successful: boolean;
    /**
     * @generated from protobuf field: protos.Success success = 3;
     */
    success?: Success;
    /**
     * @generated from protobuf field: protos.Error error = 4;
     */
    error?: Error;
    /**
     * @generated from protobuf field: repeated protos.File files = 5 [json_name = "File"];
     */
    files: File[];
}
// ===================================

/**
 * @generated from protobuf message protos.SendFileToClientRequest
 */
export interface SendFileToClientRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: protos.SendFileToClientRequestPayload payload = 2;
     */
    payload?: SendFileToClientRequestPayload;
}
/**
 * @generated from protobuf message protos.SendFileToClientRequestPayload
 */
export interface SendFileToClientRequestPayload {
    /**
     * @generated from protobuf field: protos.File file = 1;
     */
    file?: File;
}
/**
 * @generated from protobuf message protos.SendFileToClientResponse
 */
export interface SendFileToClientResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bool successful = 2;
     */
    successful: boolean;
    /**
     * @generated from protobuf field: protos.Success success = 3;
     */
    success?: Success;
    /**
     * @generated from protobuf field: protos.Error error = 4;
     */
    error?: Error;
    /**
     * @generated from protobuf field: google.protobuf.Any file = 5;
     */
    file?: Any;
}
// ===================================

/**
 * @generated from protobuf message protos.DeleteFileRequest
 */
export interface DeleteFileRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: protos.DeleteFileRequestPayload payload = 2;
     */
    payload?: DeleteFileRequestPayload;
}
/**
 * @generated from protobuf message protos.DeleteFileRequestPayload
 */
export interface DeleteFileRequestPayload {
    /**
     * @generated from protobuf field: protos.File file = 1;
     */
    file?: File;
}
/**
 * @generated from protobuf message protos.DeleteFileResponse
 */
export interface DeleteFileResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bool successful = 2;
     */
    successful: boolean;
    /**
     * @generated from protobuf field: protos.Success success = 3;
     */
    success?: Success;
    /**
     * @generated from protobuf field: protos.Error error = 4;
     */
    error?: Error;
    /**
     * @generated from protobuf field: repeated protos.File files = 5;
     */
    files: File[];
}
// ===================================

/**
 * @generated from protobuf message protos.CreateSessionRequest
 */
export interface CreateSessionRequest {
}
/**
 * @generated from protobuf message protos.CreateSessionRequestPayload
 */
export interface CreateSessionRequestPayload {
}
/**
 * @generated from protobuf message protos.CreateSessionResponse
 */
export interface CreateSessionResponse {
    /**
     * @generated from protobuf field: protos.SuccessEnum code = 1;
     */
    code: SuccessEnum;
    /**
     * @generated from protobuf field: string session_id = 2 [json_name = "session_id"];
     */
    sessionId: string;
}
// ===================================

/**
 * @generated from protobuf message protos.DeleteSessionRequest
 */
export interface DeleteSessionRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
    /**
     * @generated from protobuf field: protos.DeleteSessionRequestPayload payload = 2;
     */
    payload?: DeleteSessionRequestPayload;
}
/**
 * @generated from protobuf message protos.DeleteSessionRequestPayload
 */
export interface DeleteSessionRequestPayload {
    /**
     * @generated from protobuf field: string session = 2;
     */
    session: string;
}
/**
 * @generated from protobuf message protos.DeleteSessionResponse
 */
export interface DeleteSessionResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bool successful = 2;
     */
    successful: boolean;
    /**
     * @generated from protobuf field: protos.Success success = 3;
     */
    success?: Success;
    /**
     * @generated from protobuf field: protos.Error error = 4;
     */
    error?: Error;
}
// @generated message type with reflection information, may provide speed optimized methods
class DownloadRequest$Type extends MessageType<DownloadRequest> {
    constructor() {
        super("protos.DownloadRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "message", T: () => DownloadRequestPayload }
        ]);
    }
    create(value?: PartialMessage<DownloadRequest>): DownloadRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        if (value !== undefined)
            reflectionMergePartial<DownloadRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadRequest): DownloadRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* protos.DownloadRequestPayload payload */ 2:
                    message.payload = DownloadRequestPayload.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* protos.DownloadRequestPayload payload = 2; */
        if (message.payload)
            DownloadRequestPayload.internalBinaryWrite(message.payload, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.DownloadRequest
 */
export const DownloadRequest = new DownloadRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadRequestPayload$Type extends MessageType<DownloadRequestPayload> {
    constructor() {
        super("protos.DownloadRequestPayload", [
            { no: 1, name: "audio", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DownloadRequestPayload>): DownloadRequestPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.audio = false;
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<DownloadRequestPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadRequestPayload): DownloadRequestPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool audio */ 1:
                    message.audio = reader.bool();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadRequestPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool audio = 1; */
        if (message.audio !== false)
            writer.tag(1, WireType.Varint).bool(message.audio);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.DownloadRequestPayload
 */
export const DownloadRequestPayload = new DownloadRequestPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadResponse$Type extends MessageType<DownloadResponse> {
    constructor() {
        super("protos.DownloadResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "successful", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "success", kind: "message", T: () => Success },
            { no: 4, name: "error", kind: "message", T: () => Error },
            { no: 5, name: "data", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DownloadResponse>): DownloadResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.successful = false;
        message.data = "";
        if (value !== undefined)
            reflectionMergePartial<DownloadResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadResponse): DownloadResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bool successful */ 2:
                    message.successful = reader.bool();
                    break;
                case /* protos.Success success */ 3:
                    message.success = Success.internalBinaryRead(reader, reader.uint32(), options, message.success);
                    break;
                case /* protos.Error error */ 4:
                    message.error = Error.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                case /* string data */ 5:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bool successful = 2; */
        if (message.successful !== false)
            writer.tag(2, WireType.Varint).bool(message.successful);
        /* protos.Success success = 3; */
        if (message.success)
            Success.internalBinaryWrite(message.success, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* protos.Error error = 4; */
        if (message.error)
            Error.internalBinaryWrite(message.error, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string data = 5; */
        if (message.data !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.DownloadResponse
 */
export const DownloadResponse = new DownloadResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionFolderRequest$Type extends MessageType<CreateSessionFolderRequest> {
    constructor() {
        super("protos.CreateSessionFolderRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "message", T: () => CreateSessionFolderRequestPayload }
        ]);
    }
    create(value?: PartialMessage<CreateSessionFolderRequest>): CreateSessionFolderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        if (value !== undefined)
            reflectionMergePartial<CreateSessionFolderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSessionFolderRequest): CreateSessionFolderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* protos.CreateSessionFolderRequestPayload payload */ 2:
                    message.payload = CreateSessionFolderRequestPayload.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSessionFolderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* protos.CreateSessionFolderRequestPayload payload = 2; */
        if (message.payload)
            CreateSessionFolderRequestPayload.internalBinaryWrite(message.payload, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.CreateSessionFolderRequest
 */
export const CreateSessionFolderRequest = new CreateSessionFolderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionFolderRequestPayload$Type extends MessageType<CreateSessionFolderRequestPayload> {
    constructor() {
        super("protos.CreateSessionFolderRequestPayload", [
            { no: 1, name: "session", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateSessionFolderRequestPayload>): CreateSessionFolderRequestPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.session = "";
        if (value !== undefined)
            reflectionMergePartial<CreateSessionFolderRequestPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSessionFolderRequestPayload): CreateSessionFolderRequestPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session */ 1:
                    message.session = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSessionFolderRequestPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session = 1; */
        if (message.session !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.session);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.CreateSessionFolderRequestPayload
 */
export const CreateSessionFolderRequestPayload = new CreateSessionFolderRequestPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionFolderResponse$Type extends MessageType<CreateSessionFolderResponse> {
    constructor() {
        super("protos.CreateSessionFolderResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "successful", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "success", kind: "message", T: () => Success },
            { no: 4, name: "error", kind: "message", T: () => Error },
            { no: 5, name: "created", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateSessionFolderResponse>): CreateSessionFolderResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.successful = false;
        message.created = false;
        if (value !== undefined)
            reflectionMergePartial<CreateSessionFolderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSessionFolderResponse): CreateSessionFolderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bool successful */ 2:
                    message.successful = reader.bool();
                    break;
                case /* protos.Success success */ 3:
                    message.success = Success.internalBinaryRead(reader, reader.uint32(), options, message.success);
                    break;
                case /* protos.Error error */ 4:
                    message.error = Error.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                case /* bool created */ 5:
                    message.created = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSessionFolderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bool successful = 2; */
        if (message.successful !== false)
            writer.tag(2, WireType.Varint).bool(message.successful);
        /* protos.Success success = 3; */
        if (message.success)
            Success.internalBinaryWrite(message.success, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* protos.Error error = 4; */
        if (message.error)
            Error.internalBinaryWrite(message.error, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool created = 5; */
        if (message.created !== false)
            writer.tag(5, WireType.Varint).bool(message.created);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.CreateSessionFolderResponse
 */
export const CreateSessionFolderResponse = new CreateSessionFolderResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListFilesResponse$Type extends MessageType<ListFilesResponse> {
    constructor() {
        super("protos.ListFilesResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "successful", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "success", kind: "message", T: () => Success },
            { no: 4, name: "error", kind: "message", T: () => Error },
            { no: 5, name: "files", kind: "message", jsonName: "File", repeat: 1 /*RepeatType.PACKED*/, T: () => File }
        ]);
    }
    create(value?: PartialMessage<ListFilesResponse>): ListFilesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.successful = false;
        message.files = [];
        if (value !== undefined)
            reflectionMergePartial<ListFilesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListFilesResponse): ListFilesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bool successful */ 2:
                    message.successful = reader.bool();
                    break;
                case /* protos.Success success */ 3:
                    message.success = Success.internalBinaryRead(reader, reader.uint32(), options, message.success);
                    break;
                case /* protos.Error error */ 4:
                    message.error = Error.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                case /* repeated protos.File files = 5 [json_name = "File"];*/ 5:
                    message.files.push(File.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListFilesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bool successful = 2; */
        if (message.successful !== false)
            writer.tag(2, WireType.Varint).bool(message.successful);
        /* protos.Success success = 3; */
        if (message.success)
            Success.internalBinaryWrite(message.success, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* protos.Error error = 4; */
        if (message.error)
            Error.internalBinaryWrite(message.error, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated protos.File files = 5 [json_name = "File"]; */
        for (let i = 0; i < message.files.length; i++)
            File.internalBinaryWrite(message.files[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.ListFilesResponse
 */
export const ListFilesResponse = new ListFilesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendFileToClientRequest$Type extends MessageType<SendFileToClientRequest> {
    constructor() {
        super("protos.SendFileToClientRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "message", T: () => SendFileToClientRequestPayload }
        ]);
    }
    create(value?: PartialMessage<SendFileToClientRequest>): SendFileToClientRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        if (value !== undefined)
            reflectionMergePartial<SendFileToClientRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendFileToClientRequest): SendFileToClientRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* protos.SendFileToClientRequestPayload payload */ 2:
                    message.payload = SendFileToClientRequestPayload.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendFileToClientRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* protos.SendFileToClientRequestPayload payload = 2; */
        if (message.payload)
            SendFileToClientRequestPayload.internalBinaryWrite(message.payload, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.SendFileToClientRequest
 */
export const SendFileToClientRequest = new SendFileToClientRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendFileToClientRequestPayload$Type extends MessageType<SendFileToClientRequestPayload> {
    constructor() {
        super("protos.SendFileToClientRequestPayload", [
            { no: 1, name: "file", kind: "message", T: () => File }
        ]);
    }
    create(value?: PartialMessage<SendFileToClientRequestPayload>): SendFileToClientRequestPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendFileToClientRequestPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendFileToClientRequestPayload): SendFileToClientRequestPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protos.File file */ 1:
                    message.file = File.internalBinaryRead(reader, reader.uint32(), options, message.file);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendFileToClientRequestPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protos.File file = 1; */
        if (message.file)
            File.internalBinaryWrite(message.file, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.SendFileToClientRequestPayload
 */
export const SendFileToClientRequestPayload = new SendFileToClientRequestPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendFileToClientResponse$Type extends MessageType<SendFileToClientResponse> {
    constructor() {
        super("protos.SendFileToClientResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "successful", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "success", kind: "message", T: () => Success },
            { no: 4, name: "error", kind: "message", T: () => Error },
            { no: 5, name: "file", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<SendFileToClientResponse>): SendFileToClientResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.successful = false;
        if (value !== undefined)
            reflectionMergePartial<SendFileToClientResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendFileToClientResponse): SendFileToClientResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bool successful */ 2:
                    message.successful = reader.bool();
                    break;
                case /* protos.Success success */ 3:
                    message.success = Success.internalBinaryRead(reader, reader.uint32(), options, message.success);
                    break;
                case /* protos.Error error */ 4:
                    message.error = Error.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                case /* google.protobuf.Any file */ 5:
                    message.file = Any.internalBinaryRead(reader, reader.uint32(), options, message.file);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendFileToClientResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bool successful = 2; */
        if (message.successful !== false)
            writer.tag(2, WireType.Varint).bool(message.successful);
        /* protos.Success success = 3; */
        if (message.success)
            Success.internalBinaryWrite(message.success, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* protos.Error error = 4; */
        if (message.error)
            Error.internalBinaryWrite(message.error, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Any file = 5; */
        if (message.file)
            Any.internalBinaryWrite(message.file, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.SendFileToClientResponse
 */
export const SendFileToClientResponse = new SendFileToClientResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFileRequest$Type extends MessageType<DeleteFileRequest> {
    constructor() {
        super("protos.DeleteFileRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "message", T: () => DeleteFileRequestPayload }
        ]);
    }
    create(value?: PartialMessage<DeleteFileRequest>): DeleteFileRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteFileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFileRequest): DeleteFileRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* protos.DeleteFileRequestPayload payload */ 2:
                    message.payload = DeleteFileRequestPayload.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteFileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* protos.DeleteFileRequestPayload payload = 2; */
        if (message.payload)
            DeleteFileRequestPayload.internalBinaryWrite(message.payload, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.DeleteFileRequest
 */
export const DeleteFileRequest = new DeleteFileRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFileRequestPayload$Type extends MessageType<DeleteFileRequestPayload> {
    constructor() {
        super("protos.DeleteFileRequestPayload", [
            { no: 1, name: "file", kind: "message", T: () => File }
        ]);
    }
    create(value?: PartialMessage<DeleteFileRequestPayload>): DeleteFileRequestPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteFileRequestPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFileRequestPayload): DeleteFileRequestPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protos.File file */ 1:
                    message.file = File.internalBinaryRead(reader, reader.uint32(), options, message.file);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteFileRequestPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protos.File file = 1; */
        if (message.file)
            File.internalBinaryWrite(message.file, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.DeleteFileRequestPayload
 */
export const DeleteFileRequestPayload = new DeleteFileRequestPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFileResponse$Type extends MessageType<DeleteFileResponse> {
    constructor() {
        super("protos.DeleteFileResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "successful", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "success", kind: "message", T: () => Success },
            { no: 4, name: "error", kind: "message", T: () => Error },
            { no: 5, name: "files", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => File }
        ]);
    }
    create(value?: PartialMessage<DeleteFileResponse>): DeleteFileResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.successful = false;
        message.files = [];
        if (value !== undefined)
            reflectionMergePartial<DeleteFileResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFileResponse): DeleteFileResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bool successful */ 2:
                    message.successful = reader.bool();
                    break;
                case /* protos.Success success */ 3:
                    message.success = Success.internalBinaryRead(reader, reader.uint32(), options, message.success);
                    break;
                case /* protos.Error error */ 4:
                    message.error = Error.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                case /* repeated protos.File files */ 5:
                    message.files.push(File.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteFileResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bool successful = 2; */
        if (message.successful !== false)
            writer.tag(2, WireType.Varint).bool(message.successful);
        /* protos.Success success = 3; */
        if (message.success)
            Success.internalBinaryWrite(message.success, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* protos.Error error = 4; */
        if (message.error)
            Error.internalBinaryWrite(message.error, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated protos.File files = 5; */
        for (let i = 0; i < message.files.length; i++)
            File.internalBinaryWrite(message.files[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.DeleteFileResponse
 */
export const DeleteFileResponse = new DeleteFileResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionRequest$Type extends MessageType<CreateSessionRequest> {
    constructor() {
        super("protos.CreateSessionRequest", []);
    }
    create(value?: PartialMessage<CreateSessionRequest>): CreateSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSessionRequest): CreateSessionRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.CreateSessionRequest
 */
export const CreateSessionRequest = new CreateSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionRequestPayload$Type extends MessageType<CreateSessionRequestPayload> {
    constructor() {
        super("protos.CreateSessionRequestPayload", []);
    }
    create(value?: PartialMessage<CreateSessionRequestPayload>): CreateSessionRequestPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateSessionRequestPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSessionRequestPayload): CreateSessionRequestPayload {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CreateSessionRequestPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.CreateSessionRequestPayload
 */
export const CreateSessionRequestPayload = new CreateSessionRequestPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionResponse$Type extends MessageType<CreateSessionResponse> {
    constructor() {
        super("protos.CreateSessionResponse", [
            { no: 1, name: "code", kind: "enum", T: () => ["protos.SuccessEnum", SuccessEnum] },
            { no: 2, name: "session_id", kind: "scalar", jsonName: "session_id", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateSessionResponse>): CreateSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.sessionId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateSessionResponse): CreateSessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protos.SuccessEnum code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string session_id = 2 [json_name = "session_id"];*/ 2:
                    message.sessionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protos.SuccessEnum code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string session_id = 2 [json_name = "session_id"]; */
        if (message.sessionId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.CreateSessionResponse
 */
export const CreateSessionResponse = new CreateSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteSessionRequest$Type extends MessageType<DeleteSessionRequest> {
    constructor() {
        super("protos.DeleteSessionRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "message", T: () => DeleteSessionRequestPayload }
        ]);
    }
    create(value?: PartialMessage<DeleteSessionRequest>): DeleteSessionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteSessionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteSessionRequest): DeleteSessionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                case /* protos.DeleteSessionRequestPayload payload */ 2:
                    message.payload = DeleteSessionRequestPayload.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteSessionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        /* protos.DeleteSessionRequestPayload payload = 2; */
        if (message.payload)
            DeleteSessionRequestPayload.internalBinaryWrite(message.payload, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.DeleteSessionRequest
 */
export const DeleteSessionRequest = new DeleteSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteSessionRequestPayload$Type extends MessageType<DeleteSessionRequestPayload> {
    constructor() {
        super("protos.DeleteSessionRequestPayload", [
            { no: 2, name: "session", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteSessionRequestPayload>): DeleteSessionRequestPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.session = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteSessionRequestPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteSessionRequestPayload): DeleteSessionRequestPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session */ 2:
                    message.session = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteSessionRequestPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session = 2; */
        if (message.session !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.session);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.DeleteSessionRequestPayload
 */
export const DeleteSessionRequestPayload = new DeleteSessionRequestPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteSessionResponse$Type extends MessageType<DeleteSessionResponse> {
    constructor() {
        super("protos.DeleteSessionResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "successful", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "success", kind: "message", T: () => Success },
            { no: 4, name: "error", kind: "message", T: () => Error }
        ]);
    }
    create(value?: PartialMessage<DeleteSessionResponse>): DeleteSessionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.successful = false;
        if (value !== undefined)
            reflectionMergePartial<DeleteSessionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteSessionResponse): DeleteSessionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bool successful */ 2:
                    message.successful = reader.bool();
                    break;
                case /* protos.Success success */ 3:
                    message.success = Success.internalBinaryRead(reader, reader.uint32(), options, message.success);
                    break;
                case /* protos.Error error */ 4:
                    message.error = Error.internalBinaryRead(reader, reader.uint32(), options, message.error);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteSessionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bool successful = 2; */
        if (message.successful !== false)
            writer.tag(2, WireType.Varint).bool(message.successful);
        /* protos.Success success = 3; */
        if (message.success)
            Success.internalBinaryWrite(message.success, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* protos.Error error = 4; */
        if (message.error)
            Error.internalBinaryWrite(message.error, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.DeleteSessionResponse
 */
export const DeleteSessionResponse = new DeleteSessionResponse$Type();

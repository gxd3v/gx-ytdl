// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "global.proto" (package "protos", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
import { ErrorsEnum } from "./codes/errors";
import { SuccessEnum } from "./codes/success";
/**
 * @generated from protobuf message protos.Success
 */
export interface Success {
    /**
     * @generated from protobuf field: protos.SuccessEnum code = 1;
     */
    code: SuccessEnum;
    /**
     * @generated from protobuf field: string status = 2;
     */
    status: string;
}
/**
 * @generated from protobuf message protos.Error
 */
export interface Error {
    /**
     * @generated from protobuf field: protos.ErrorsEnum code = 1;
     */
    code: ErrorsEnum;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message protos.File
 */
export interface File {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp created = 2;
     */
    created?: Timestamp;
    /**
     * @generated from protobuf field: int64 times_downloaded = 3;
     */
    timesDownloaded: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp ttl = 4;
     */
    ttl?: Timestamp;
    /**
     * @generated from protobuf field: int64 size = 5;
     */
    size: bigint;
}
/**
 * @generated from protobuf message protos.ActionCode
 */
export interface ActionCode {
    /**
     * @generated from protobuf field: string Code = 1;
     */
    code: string;
}
/**
 * @generated from protobuf message protos.PanicResponse
 */
export interface PanicResponse {
    /**
     * @generated from protobuf field: protos.ErrorsEnum code = 1;
     */
    code: ErrorsEnum;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Success$Type extends MessageType<Success> {
    constructor() {
        super("protos.Success", [
            { no: 1, name: "code", kind: "enum", T: () => ["protos.SuccessEnum", SuccessEnum] },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Success>): Success {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<Success>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Success): Success {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protos.SuccessEnum code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Success, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protos.SuccessEnum code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Success
 */
export const Success = new Success$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Error$Type extends MessageType<Error> {
    constructor() {
        super("protos.Error", [
            { no: 1, name: "code", kind: "enum", T: () => ["protos.ErrorsEnum", ErrorsEnum] },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Error>): Error {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<Error>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Error): Error {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protos.ErrorsEnum code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Error, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protos.ErrorsEnum code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.Error
 */
export const Error = new Error$Type();
// @generated message type with reflection information, may provide speed optimized methods
class File$Type extends MessageType<File> {
    constructor() {
        super("protos.File", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created", kind: "message", T: () => Timestamp },
            { no: 3, name: "times_downloaded", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "ttl", kind: "message", T: () => Timestamp },
            { no: 5, name: "size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<File>): File {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.timesDownloaded = 0n;
        message.size = 0n;
        if (value !== undefined)
            reflectionMergePartial<File>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: File): File {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Timestamp created */ 2:
                    message.created = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.created);
                    break;
                case /* int64 times_downloaded */ 3:
                    message.timesDownloaded = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp ttl */ 4:
                    message.ttl = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.ttl);
                    break;
                case /* int64 size */ 5:
                    message.size = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: File, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Timestamp created = 2; */
        if (message.created)
            Timestamp.internalBinaryWrite(message.created, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 times_downloaded = 3; */
        if (message.timesDownloaded !== 0n)
            writer.tag(3, WireType.Varint).int64(message.timesDownloaded);
        /* google.protobuf.Timestamp ttl = 4; */
        if (message.ttl)
            Timestamp.internalBinaryWrite(message.ttl, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int64 size = 5; */
        if (message.size !== 0n)
            writer.tag(5, WireType.Varint).int64(message.size);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.File
 */
export const File = new File$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActionCode$Type extends MessageType<ActionCode> {
    constructor() {
        super("protos.ActionCode", [
            { no: 1, name: "Code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ActionCode>): ActionCode {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        if (value !== undefined)
            reflectionMergePartial<ActionCode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionCode): ActionCode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Code */ 1:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActionCode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.ActionCode
 */
export const ActionCode = new ActionCode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PanicResponse$Type extends MessageType<PanicResponse> {
    constructor() {
        super("protos.PanicResponse", [
            { no: 1, name: "code", kind: "enum", T: () => ["protos.ErrorsEnum", ErrorsEnum] },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PanicResponse>): PanicResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = 0;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<PanicResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PanicResponse): PanicResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protos.ErrorsEnum code */ 1:
                    message.code = reader.int32();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PanicResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protos.ErrorsEnum code = 1; */
        if (message.code !== 0)
            writer.tag(1, WireType.Varint).int32(message.code);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protos.PanicResponse
 */
export const PanicResponse = new PanicResponse$Type();
